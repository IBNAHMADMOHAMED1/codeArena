## port
server.port=8081
server.servlet.context-path=/api
spring.application.name=code-arena
## Postgres Databasep
spring.datasource.url=jdbc:postgresql://localhost:5432/code_arena
spring.datasource.username=postgres
spring.datasource.password=1234
## Hibernate Properties
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
## Keycloak Integration
# The jwk-set-uri property contains the public key that the server can use for verifying the signature of the JWT.
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080/realms/SpringBootKeycloak
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs

# In JWT auth converter properties, the resource-id specifies the identifier for the resource that the token is intended to access.
# The principal-attribute refers to the attribute in the JWT (access token) that the client will use to identify the authenticated user.
jwt.auth.converter.resource-id=spring
# Here I used the preferred_username field which means that the client will extract the value
# of this field from the access token and use it as the identifier for the authenticated user.
jwt.auth.converter.principal-attribute=preferred_username

logging.level.org.springframework.web=DEBUG



